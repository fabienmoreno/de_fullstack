version: '3.8'

services:
  # ðŸ”¹ Traefik Reverse Proxy
  traefik:
    image: traefik:v2.10
    container_name: traefik
    restart: always
    command:
      - "--api.dashboard=true" # Enable the Traefik Dashboard
      - "--api.insecure=true" # Keep this only for testing, disable in production
      - "--providers.docker=true" # Enable Docker as a provider
      - "--providers.docker.exposedbydefault=false" # Do not expose all containers automatically
      - "--entrypoints.web.address=:80" # Define HTTP entrypoint
      - "--entrypoints.websecure.address=:443" # Define HTTPS entrypoint
      - "--certificatesresolvers.myresolver.acme.tlschallenge=true" # Enable Let's Encrypt TLS challenge
      - "--certificatesresolvers.myresolver.acme.email=admin@fabienmoreno.me" # Email for SSL registration
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json" # Storage for SSL certificates
    ports:
      - "80:80"    # HTTP
      - "443:443"  # HTTPS
      - "8080:8080"  # Traefik Dashboard (remove for production)
    networks:
      - app-network
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro" # Allow Traefik to manage Docker services
      - "./letsencrypt:/letsencrypt" # Storage for SSL certificates

  # ðŸ”¹ PostgreSQL for App
  postgres:
    image: postgres:15
    container_name: app_postgres
    restart: always
    environment:
      POSTGRES_USER: "${APP_POSTGRES_USER}"
      POSTGRES_PASSWORD: "${APP_POSTGRES_PASSWORD}"
      POSTGRES_DB: "${APP_POSTGRES_DB}"
    command: >
      postgres
        -c wal_level=logical
        -c max_wal_senders=1
        -c max_replication_slots=1
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network

  # ðŸ”¹ Flask API Service
  api-vehiclecheck:
    build: ./api-vehiclecheck
    container_name: api_vehiclecheck
    restart: always
    depends_on:
      - postgres
    environment:
      DATABASE_URL: "postgresql://${APP_POSTGRES_USER}:${APP_POSTGRES_PASSWORD}@postgres:5432/${APP_POSTGRES_DB}"
    networks:
      - app-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api-vehiclecheck.rule=Host(`api-vehiclecheck.de.fabienmoreno.me`)"
      - "traefik.http.routers.api-vehiclecheck.entrypoints=websecure"
      - "traefik.http.routers.api-vehiclecheck.tls.certresolver=myresolver"

  # ðŸ”¹ Metabase Database
  metabase-db:
    image: postgres:15
    container_name: metabase-db
    restart: always
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${MB_POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      POSTGRES_DB: ${MB_POSTGRES_DB}
      POSTGRES_USER: ${MB_POSTGRES_USER}
      POSTGRES_PASSWORD: ${MB_POSTGRES_PASSWORD}
    volumes:
      - metabase-db-data:/var/lib/postgresql/data

  # ðŸ”¹ Metabase Application
  metabase:
    image: metabase/metabase:latest
    container_name: metabase
    restart: always
    networks:
      - app-network
    depends_on:
      metabase-db:
        condition: service_healthy
    environment:
      MB_DB_TYPE: postgres
      MB_DB_DBNAME: ${MB_POSTGRES_DB}
      MB_DB_HOST: metabase-db
      MB_DB_PORT: 5432
      MB_DB_USER: ${MB_POSTGRES_USER}
      MB_DB_PASS: ${MB_POSTGRES_PASSWORD}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.metabase.rule=Host(`metabase.de.fabienmoreno.me`)"
      - "traefik.http.routers.metabase.entrypoints=websecure"
      - "traefik.http.routers.metabase.tls.certresolver=myresolver"

  # ðŸ”¹ PGAdmin
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: "${PGADMIN_DEFAULT_EMAIL}"
      PGADMIN_DEFAULT_PASSWORD: "${PGADMIN_DEFAULT_PASSWORD}"
    depends_on:
      - postgres
      - metabase-db
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.pgadmin.rule=Host(`pgadmin.de.fabienmoreno.me`)"
      - "traefik.http.routers.pgadmin.entrypoints=websecure"
      - "traefik.http.routers.pgadmin.tls.certresolver=myresolver"
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  letsencrypt:
  postgres_data:
  metabase-db-data:
  pgadmin-data:
