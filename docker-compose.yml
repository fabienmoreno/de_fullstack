version: '3.8'

services:
  #########################
  # Nginx Proxy Manager
  #########################
  npm:
    image: 'jc21/nginx-proxy-manager:latest'
    container_name: npm
    restart: always
    ports:
      - '80:80'     # HTTP
      - '443:443'   # HTTPS
      - '81:81'     # Admin console
    volumes:
      - npm_data:/data
      - npm_letsencrypt:/etc/letsencrypt
    networks:
      - web
    # Example optional environment variables:
    # environment:
    #   SQL_DATABASE: "npm"
    #   SQL_USER: "admin"

  #########################
  # Postgres
  #########################
  postgres:
    image: postgres:15
    container_name: postgres
    restart: always
    
    # Use environment variables that you'll set in Portainer
    environment:
      POSTGRES_USER: "${POSTGRES_USER}"
      POSTGRES_PASSWORD: "${POSTGRES_PASSWORD}"
      POSTGRES_DB: "${POSTGRES_DB}"   # e.g. 'main_db'
    
    # Command line flags to enable logical replication
    command: >
      postgres
        -c wal_level=logical
        -c max_wal_senders=1
        -c max_replication_slots=1
    
    # Publish the DB port externally so Airbyte Cloud can connect
    ports:
      - '5432:5432'
    
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    
    networks:
      - backend

  #########################
  # PGAdmin
  #########################
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin
    restart: always
    
    # Environment variables set in Portainer
    environment:
      PGADMIN_DEFAULT_EMAIL: "${PGADMIN_DEFAULT_EMAIL}"
      PGADMIN_DEFAULT_PASSWORD: "${PGADMIN_DEFAULT_PASSWORD}"

    depends_on:
      - postgres
    
    ports:
      - 5050:80

    # Place PGAdmin on both 'backend' (to talk to Postgres) and 'web' (so NPM can proxy it)
    networks:
      - backend
      - web

  #########################
  # Flask app vehicle
  #########################
  flask_app:
      build: ./api-vehiclecheck   # This folder
      container_name: flask_app
      restart: always
      depends_on:
        - postgres
      environment:
        DB_HOST: postgres
        DB_PORT: 5432
        DB_USER: ${POSTGRES_USER}
        DB_PASSWORD: ${POSTGRES_PASSWORD}
        DB_NAME: ${POSTGRES_DB}
      networks:
        - web
        - backend

  #########################
  # Metabase App
  #########################
  metabase:
    image: metabase/metabase:latest
    container_name: metabase
    ports:
      - "3000:3000"
    environment:
      MB_DB_TYPE: postgres
      MB_DB_DBNAME: metabase_db
      MB_DB_PORT: 5432
      MB_DB_USER: metabase_user
      MB_DB_PASS: "${POSTGRES_METABASE_USER_PASSWORD}"
      MB_DB_HOST: postgres
    depends_on:
      - postgres
    networks:
      - backend


networks:
  web:
    external: false
  backend:
    external: false

volumes:
  npm_data:
  npm_letsencrypt:
  postgres_data: