version: '3.8'

services:
  # Traefik
  traefik:
    image: traefik:v2.10 # Use a specific version for stability
    container_name: traefik
    restart: always
    ports:
      - "80:80"    # HTTP
      - "443:443"  # HTTPS
    networks:
      - app-network
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock # Needed for Docker provider
      - ./traefik/traefik.yml:/etc/traefik/traefik.yml  # Mount the file directly
      - ./traefik/traefik_dynamic.yml:/etc/traefik/traefik_dynamic.yml # Mount the file directly
    labels: # Add these labels to traefik service
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`traefik.de.fabienmoreno.me`)" # Optional Traefik dashboard
      - "traefik.http.routers.traefik.service=api@internal"
      - "traefik.http.routers.traefik.middlewares=auth"
      - "traefik.http.middlewares.auth.basicauth.users=admin:$$apr1$$Y.Y2W6FA$$zK68T2K83J88l4L31/6Yp1" # Replace with htpasswd generated password

  # Main postgres DB for app
  postgres:
    image: postgres:15
    container_name: app_postgres
    restart: always
    environment:
      POSTGRES_USER: "${APP_POSTGRES_USER}"
      POSTGRES_PASSWORD: "${APP_POSTGRES_PASSWORD}"
      POSTGRES_DB: "${APP_POSTGRES_DB}"
    command: >
      postgres
        -c wal_level=logical
        -c max_wal_senders=1
        -c max_replication_slots=1
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network

  # Metabase DB
  metabase-db:
    image: postgres:15
    container_name: metabase-db
    restart: always
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${MB_POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    environment:
      POSTGRES_DB: ${MB_POSTGRES_DB}
      POSTGRES_USER: ${MB_POSTGRES_USER}
      POSTGRES_PASSWORD: ${MB_POSTGRES_PASSWORD}
    volumes:
      - metabase-db-data:/var/lib/postgresql/data

  # Metabase app
  metabase:
    image: metabase/metabase:latest
    container_name: metabase
    restart: always
    networks:
      - app-network
    depends_on:
      metabase-db:
        condition: service_healthy
    environment:
      MB_DB_TYPE: postgres
      MB_DB_DBNAME: ${MB_POSTGRES_DB}
      MB_DB_HOST: metabase-db
      MB_DB_PORT: 5432
      MB_DB_USER: ${MB_POSTGRES_USER}
      MB_DB_PASS: ${MB_POSTGRES_PASSWORD}
    ports:
      - "3000:3000"
    labels: # Add these labels to metabase service
      - "traefik.enable=true"
      - "traefik.http.routers.metabase.rule=Host(`metabase.de.fabienmoreno.me`)"
      - "traefik.http.routers.metabase.entrypoints=web,websecure"
      - "traefik.http.routers.metabase.tls=true"
      # - "traefik.http.routers.metabase.middlewares=auth" # Optional authentication

  # PG Admin
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: pgadmin
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: "${PGADMIN_DEFAULT_EMAIL}"
      PGADMIN_DEFAULT_PASSWORD: "${PGADMIN_DEFAULT_PASSWORD}"
    depends_on:
      - postgres
      - metabase-db
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    ports:
      - 5050:80
    networks:
      - app-network
    labels: # Add these labels to pgadmin service
      - "traefik.enable=true"
      - "traefik.http.routers.pgadmin.rule=Host(`pgadmin.de.fabienmoreno.me`)"
      - "traefik.http.routers.pgadmin.entrypoints=web,websecure"
      - "traefik.http.routers.pgadmin.tls=true"
      # - "traefik.http.routers.pgadmin.middlewares=auth" # Optional authentication

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
  metabase-db-data:
  pgadmin-data:
  traefik_data: # Add this volume for Traefik